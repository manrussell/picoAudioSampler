

cd ~/pico
sudo apt install automake autoconf build-essential texinfo libtool libftdi-dev libusb-1.0-0-dev
git clone https://github.com/raspberrypi/openocd.git --branch rp2040 --depth=1
cd openocd
./bootstrap
./configure
make -j4



# Tried this with the realOpenOCD
#openocd -f interface/cmsis-dap.cfg -f target/rp2040.cfg -c "adapter speed 5000" -c "program blink/blink.elf verify reset exit"
src/openocd -s tcl -f interface/cmsis-dap.cfg -f target/rp2040.cfg -c "adapter speed 5000" -c "program ../myPicoProj/blink/build/blink.elf verify reset exit"

# dev/piPico/pico/myPicoProj/blink$ 



OpenOCD
=======
markas@markas-DTop:~/dev/piPico/pico/openocd$ src/openocd -s tcl -f interface/cmsis-dap.cfg -f target/rp2040.cfg -c "adapter speed 5000" -c "program ../myPicoProj/blink/build/blink.elf verify reset"


*) Could try without the -c option and put that into cmsis-dap.cfg ??
*) I think that "program" flashed the target
*) 

gdb
====

Notes: Prefer GDB command "target extended-remote 3333" instead of "target remote 3333"

markas@markas-DTop:$ cd ~/dev/pico/pipico/myPicoProj/blink/build
markas@markas-DTop:~/dev/piPico/pico/myPicoProj/blink/build$ gdb-multiarch blink.elf

*)
Connect GDB to OpenOCD:

(gdb) target remote localhost:3333

*)
and load picoboard_blinky.elf into flash:

(gdb) load
    Loading section .boot2, size 0x100 lma 0x10000000
    Loading section .text, size 0x4828 lma 0x10000100
    Loading section .rodata, size 0xd6c lma 0x10004928
    Loading section .binary_info, size 0x1c lma 0x10005694
    Loading section .data, size 0xa4c lma 0x100056b0
    Start address 0x100001e8, load size 24828
    Transfer rate: 8 KB/sec, 4138 bytes/write.

*)
if you want to set a breakpoint at main() before running the executable:

(gdb) monitor reset init
(gdb) b main
(gdb) continue

*)
tui enable



How to reset...
===============
*)
I didn't know how to do it with gdb directly so, i pulled the "RUN" pin to found to reset the board, this wrked for both the pico-probe and the U.U.T.
